@model IEnumerable<PresentIndicative>

<h2 style="text-align:center;">Verb: @Model.First().Infinitive</h2>

<form id="conj-form" style="display: flex; flex-direction: column; align-items: center;">
    <label>First person singular</label>
    <input id="fps" type="text" />
    <small></small>
    <label>Second person singular</label>
    <input id="sps" type="text" />
    <small></small>
    <label>Third person singular</label>
    <input id="tps" type="text" />
    <small></small>
    <label>First person plural</label>
    <input id="fpp" type="text" />
    <small></small>
    <label>Second person plural</label>
    <input id="spp" type="text" />
    <small></small>
    <label>Third person plural</label>
    <input id="tpp" type="text" />
    <small></small>
    <button style="margin: 10px;" type="submit">Submit Answers</button>
</form>

<script>
    const answers = [];

    var conjugations = @Html.Raw(Json.Serialize(Model.First()))
    

    // const myForm = document.getElementById("conj-form");
    // const smallText = myForm.querySelectorAll("small");

    // myForm.addEventListener("submit", (e) => {
    //     e.preventDefault()

    //     answers.push(myForm["fps"].value)
    //     answers.push(myForm["sps"].value)
    //     answers.push(myForm["tps"].value)
    //     answers.push(myForm["fpp"].value)
    //     answers.push(myForm["spp"].value)
    //     answers.push(myForm["tpp"].value)

    //     for (let i = 0; i < answers.length; i++){
    //         if (answers[i] === conjugations.vedere[i]) {
    //             smallText[i].innerHTML = "Correct!"
    //             smallText[i].style.color = "green";
    //         }
    //         else{
    //             smallText[i].innerHTML = "Incorrect. Try again."
    //             smallText[i].style.color = "red";
    //         }
    //     }
    // })
</script>
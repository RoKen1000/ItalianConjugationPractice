@using LanguagePracticeSite.Models;
@{
    Layout = "_Layout";
}

@model PresentPerfect

<h2 style="text-align:center;">Verb: @Model.Infinitive</h2>

<form id="conj-form" class="conjugation-forms">
    <label>First person singular</label>
    <input id="firstPersonSingular" type="text" />
    <small id="firstPersonSingular"></small>
    <label>Second person singular</label>
    <input id="secondPersonSingular" type="text" />
    <small id="secondPersonSingular"></small>
    <label>Third person singular</label>
    <input id="thirdPersonSingular" type="text" />
    <small id="thirdPersonSingular"></small>
    <label>First person plural</label>
    <input id="firstPersonPlural" type="text" />
    <small id="firstPersonPlural"></small>
    <label>Second person plural</label>
    <input id="secondPersonPlural" type="text" />
    <small id="secondPersonPlural"></small>
    <label>Third person plural</label>
    <input id="thirdPersonPlural" type="text" />
    <small id="thirdPersonPlural"></small>
    <button class="btn btn-success submit-buttons" type="submit">Submit Answers</button>
</form>

<button class="btn btn-info next-word-buttons" type="button" id="next-word">Next word</button>

@section Scripts{
    <script>
        $(document).ready(function () {
            const conjugations = @Html.Raw(Json.Serialize(Model));

            $("#conj-form").on("submit", function (event) {
                event.preventDefault();

                $("#conj-form :input:not(:submit)").each(function () {
                    if (conjugations.usesEssere === true) {

                        let singularConjugations = ["firstPersonSingular", "secondPersonSingular", "thirdPersonSingular"];
                        let pluralConjugations = ["firstPersonPlural", "secondPersonPlural", "thirdPersonPlural"];

                        if (singularConjugations.includes(this.id)) {

                            let feminineFormSingular = conjugations[this.id].slice(0, -1) + "a";

                            if (this.value.toLowerCase() === conjugations[this.id] || this.value.toLowerCase() === feminineFormSingular) {
                                $("small#" + this.id).html("Correct!").css("color", "green");
                            } else {
                                $("small#" + this.id).html("Incorrect. Try again.").css("color", "red");
                            }
                        } else if (pluralConjugations.includes(this.id)) {

                            let feminineFormPlural = conjugations[this.id].slice(0, -1) + "e";

                            if (this.value.toLowerCase() === conjugations[this.id] || this.value.toLowerCase() === feminineFormPlural) {
                                $("small#" + this.id).html("Correct!").css("color", "green");
                            } else {
                                $("small#" + this.id).html("Incorrect. Try again.").css("color", "red");
                            }
                        }

                    }
                    else {
                        if (this.value.toLowerCase() === conjugations[this.id]) {
                            $("small#" + this.id).html("Correct!").css("color", "green");
                        } else {
                            $("small#" + this.id).html("Incorrect. Try again.").css("color", "red");
                        }
                    }
                });

            })
        })
    </script>

    <script>
        $("#next-word").click(function () {
            location.reload();
        })
    </script>
}
